{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderjarabik/Desktop/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const events = useLoaderData();\n\n  //if (data.isError) {\n  //    return <p>{data.message}</p>\n  //};\n  //const events = data.events;\n  //return <EventsList events={events} />\n\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadedEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 28\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 12\n  }, this);\n}\n_s(EventsPage, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return { isError: true, message: 'Could not fetch events.' }\n    //throw new Response(JSON.stringify({ message: 'Could not fetch events' }), { status: 500 });\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/alexanderjarabik/Desktop/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n\n    const events = useLoaderData();\n\n    //if (data.isError) {\n    //    return <p>{data.message}</p>\n    //};\n    //const events = data.events;\n    //return <EventsList events={events} />\n\n    return <Await resolve={events}>\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\n    </Await>\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        //return { isError: true, message: 'Could not fetch events.' }\n        //throw new Response(JSON.stringify({ message: 'Could not fetch events' }), { status: 500 });\n        throw json(\n            { message: 'Could not fetch events.' },\n            {\n                status: 500,\n            });\n    } else {\n\n        return response;\n    }\n}\n\nexport function loader() {\n    return defer({\n        events: loadEvents()\n    });\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAElB,MAAMC,MAAM,GAAGT,aAAa,CAAC,CAAC;;EAE9B;EACA;EACA;EACA;EACA;;EAEA,oBAAOM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EACxBC,YAAY,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEG;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AACZ;AAACR,EAAA,CAbQD,UAAU;EAAA,QAEAP,aAAa;AAAA;AAAAiB,EAAA,GAFvBV,UAAU;AAenB,eAAeA,UAAU;AAEzB,eAAeW,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA,MAAMpB,IAAI,CACN;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACIC,MAAM,EAAE;IACZ,CAAC,CAAC;EACV,CAAC,MAAM;IAEH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACrB,OAAOtB,KAAK,CAAC;IACTO,MAAM,EAAES,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}